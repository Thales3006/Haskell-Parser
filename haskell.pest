// special rules
WHITESPACE = _{ " " | "\t" }

// main program structure
program = _{ SOI ~ (stmt? ~ NEWLINE)* ~ stmt? ~ EOI }

stmt = _{ constant | ("--" ~ comment) }

comment = { (!NEWLINE ~ ANY)* }

// function body
constant = _{ declaration | definition }
declaration = _{ const_declaration | type_declaration }
const_declaration = { ident_lower ~ "::" ~ func_type }
type_declaration = { "data" ~ custom_type ~ "=" ~ constructor_declaration ~ (case ~ constructor_declaration)*}
definition = { ident_lower ~ arguments ~ body }

// function arguments
arguments = { pattern* }
pattern = _{ ("(" ~ constructor ~ ")") | ident | literal | wildcard }
wildcard = { "_" }

// function definition
body = _{ ("=" ~ expression) | guards }
case = _{ NEWLINE? ~ "|" }
guards = { guard+ }
guard = { case ~ (otherwise | expression) ~ "=" ~ expression }

// evaluabe expressions
expression = { uni_op? ~ (func_prefix|atom) ~ (func_infix ~ (func_prefix|atom))* }
atom = _{ ("(" ~ expression ~ ")") | literal | ident }

// function calling
func_prefix = { (ident | ("(" ~ bin_op ~ ")")) ~ atom+ }
func_infix = _{ ("`" ~ ident ~ "`") | bin_op }

// identifications
ident = _{ ident_lower | ident_upper }
ident_lower = @{ ASCII_ALPHA_LOWER ~ (ASCII_ALPHANUMERIC | "_")* }
ident_upper = @{ ASCII_ALPHA_UPPER ~ (ASCII_ALPHANUMERIC | "_")* }

// literals
literal = { decimal | integer | bool | list}
integer = @{ ASCII_DIGIT+ }
decimal = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
list = { "[" ~ (expression ~ ("," ~ expression)*)? ~ "]" }
bool = { true_literal | false_literal }
true_literal = { "True" }
false_literal = { "False" }

// reserved words
otherwise = { "otherwise" }

// types
datatype = _{ primitive_type | list_type | ("(" ~ datatype~ ")") | custom_type | generic }
list_type = { "[" ~ datatype ~ "]" }
func_type = { datatype ~ ("->" ~ datatype)* }
custom_type = { ident_upper }
generic = { ident_lower }

primitive_type = _{ int_type | float_type | char_type | bool_type }
int_type = { "Int" }
float_type = { "Float" }
char_type = { "Char" }
bool_type = { "Bool" }

// unary operations
uni_op = _{ negative }
negative = { "-" }

// binary operations (2 arguments)
bin_op = _{ arithmetic | comparison | logical | list_op | func_op }

arithmetic = _{ add | sub | mul | div | exp }
add = { "+" }
sub = { "-" }
mul = { "*" }
div = { "/" }
exp = _{ exp_int | exp_frac | exp_float }
exp_int = { "^" }
exp_frac = { "^^" }
exp_float = { "**" }


comparison = _{ equal | not_equal | great_or_equal | less_or_equal | greater | lesser }
equal = { "==" }
not_equal = { "/=" }
greater = { ">" }
lesser = { "<" }
great_or_equal = { ">=" }
less_or_equal = { "<=" }

logical = _{ and | or }
and = { "&&" }
or = { "||" }

list_op = _{ cons | concat | indexing }
cons = { ":" }
concat = { "++" }
indexing = { "!!" }

func_op= _{ composition  | application }
composition = { "." }
application = { "$" }

// datatypes constructors
constructor_declaration = { ident_upper ~ datatype* }
constructor = { bin_constructor | prefix_constructor }
prefix_constructor = { ident_upper ~ pattern* }
bin_constructor = { pattern ~ construct_op ~ pattern }

construct_op = _{ cons }




