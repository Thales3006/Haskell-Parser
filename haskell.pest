// special rules
WHITESPACE = _{ " " | "\t" }

// main program structure
program = _{ SOI ~ (stmt? ~ NEWLINE)* ~ stmt? ~ EOI }

stmt = _{ constant | comment }

comment = { "--" ~ (!NEWLINE ~ ANY)* }

// function body
constant = { declaration | definition }
declaration = { ident ~ "::" ~ (func_type | datatype) }
definition = { ident ~ arguments ~ result }

// function arguments
arguments = { pattern* }
pattern = _{ ident | literal | wildcard }
wildcard = { "_" }

// function definition
result = { ("=" ~ expression) | guard+ }
guard = { NEWLINE? ~ "|" ~ (otherwise | expression) ~ "=" ~ expression }
expression = { exp ~ (bin_op ~ exp)* }
exp = _{ func_call | atom }
atom = _{ "(" ~ expression ~ ")" | literal | ident }

// function calling
func_call = _{ func_infix | func_prefix }
func_prefix = { ident ~ atom+ | uni_op ~ atom }
func_infix = { atom ~ "`" ~ ident ~ "`" ~ atom }

// literals, reserved words and variables
ident = @{ ASCII_ALPHA ~ ASCII_ALPHANUMERIC* }

literal = { decimal | integer | bool | list}
integer = @{ ASCII_DIGIT+ }
decimal = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
list = { "[" ~ (expression ~ ("," ~ expression)*)? ~ "]" }

otherwise = { "otherwise" }

bool = { true | false}
true = { "True" }
false = { "False" }

// types
datatype = _{ primitive_type | list_type | ("(" ~ func_type ~ ")") }
primitive_type = _{ int_type | float_type | char_type | bool_type }
func_type = { datatype ~ ("->" ~ datatype)+ }
int_type = { "Int" }
float_type = { "Float" }
char_type = { "Char" }
bool_type = { "Bool" }
list_type = { "[" ~ datatype ~ "]" }

uni_op = _{ negative | xor }

negative = { "-" }

// binary operations (2 arguments)
bin_op = _{ arithmetic | comparison | logical | mix_op }

arithmetic = _{ add | sub | mul | div }
add = { "+" }
sub = { "-" }
mul = { "*" }
div = { "/" }


comparison = _{ equal | not_equal | greater | lesser | great_or_equal | less_or_equal }
equal = { "==" }
not_equal = { "!=" }
greater = { ">" }
lesser = { "<" }
great_or_equal = { ">=" }
less_or_equal = { "<=" }

logical = _{ and | or | xor }
and = { "&&" }
or = { "||" }
xor = { "xor" }

mix_op = { cons | concat | composition }
cons = { ":" }
concat = { "++" }
composition = { "." }




